# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:21:04+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import Jb2008GetResponse, Nrlmsise00GetResponse, WamIpeGetResponse

app = MCPProxy(
    contact={'x-twitter': 'amentumspace'},
    description='Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br>\nAPI requests must contain a key "API-Key" in the header (see code samples). Obtain a key from  <a href=\'https://developer.amentum.io\'>here</a>. <br><br> \nHelp us improve the quality of our web APIs by completing our 2 minute survey <a href="https://www.surveymonkey.com/r/CTDTRBN">here</a>.<br><br>\nAmentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br>\nCopyright <a href=\'https://amentum.space\'>Amentum Pty Ltd</a> 2021.\n',
    title='Atmosphere API',
    version='1.1.1',
    servers=[{'url': ''}],
)


@app.get(
    '/jb2008',
    description=""" under given conditions.
 """,
    tags=['atmospheric_density_and_temperature', 'atmospheric_composition_analysis'],
)
def app_api_endpoints__j_b2008_sample_atmosphere(
    year: int,
    month: int = ...,
    day: int = ...,
    altitude: float = ...,
    geodetic_latitude: float = ...,
    geodetic_longitude: float = ...,
    utc: float = ...,
):
    """
    Compute atmospheric density and temperatures

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nrlmsise00',
    description=""" at specified conditions.
 """,
    tags=['atmospheric_density_and_temperature', 'atmospheric_composition_analysis'],
)
def app_api_endpoints__n_r_l_m_s_i_s_e00_sample_atmosphere(
    year: int,
    month: int = ...,
    day: int = ...,
    altitude: float = ...,
    geodetic_latitude: float = ...,
    geodetic_longitude: float = ...,
    utc: float = ...,
    f107a: Optional[float] = None,
    f107: Optional[float] = None,
    ap: Optional[float] = None,
):
    """
    Compute atmospheric composition, density, and temperatures

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wam-ipe',
    description=""" at a given position and time on 42-48 hour forecast horizon (10 minute resolution). NOTE: latitudes outside the interval (-90,90) are clipped to the endpoints; longitudes outside (0,360) are wrapped.   
 """,
    tags=['atmospheric_density_and_temperature', 'atmospheric_condition_forecasting'],
)
def app_api_wfs_endpoints__w_f_s_get_values(
    latitude: float,
    longitude: float = ...,
    altitude: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    hour: int = ...,
    minute: int = ...,
):
    """
    Forecast winds, ion and molecular densities, and temperatures in the atmosphere

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
